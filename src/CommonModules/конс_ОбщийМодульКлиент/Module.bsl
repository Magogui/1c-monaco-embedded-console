#Область ПрограммныйИнтерфейс

Процедура ПриОткрытии(Форма) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Форма);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	// последняя используемая страница с кодом
	ТекущаяСтраница = Форма.конс_КлючАктивнойСтраницы;
	
	// получаем текущий код
	ТекущийКод = ПолучитьТекст(Форма);
	
	Соответствие = Неопределено;
	// сохраняем текущий код по ключу страницы
	ЕстьКодНаТекущейСтранице = Форма.конс_СоответствияКодовНаСтранице.Свойство(ТекущаяСтраница, Соответствие);
	Если ЕстьКодНаТекущейСтранице Тогда
		Соответствие.Вставить("Код", ТекущийКод);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	ЗакрытьКонсоль(Форма);
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПриИзмененииВкладкиСКодом(Форма) Экспорт
	
	Форма.конс_ЭтоИзменениеСтраницы = Истина;
	
	АктивированнаяВкладка = Форма.конс_КлючАктивированнойСтраницы;
	
	// проверяем есть ли консоль на текущей странице
	ТекСтраница = Форма.конс_КлючАктивнойСтраницы;
	
	ЕстьКодНаТекущейСтранице = Форма.конс_СоответствияКодовНаСтранице.Свойство(ТекСтраница);
	Если ЕстьКодНаТекущейСтранице Тогда
		
		// получаем текущий код
		ТекущийКод = ПолучитьТекст(Форма);
		
		// сохраняем текущий код по ключу страницы
		Соответствие = Форма.конс_СоответствияКодовНаСтранице[ТекСтраница];
		Соответствие.Вставить("Код", ТекущийКод);
		
	КонецЕсли;
	
	// очищаем код страницы
	ОчиститьТекст(Форма);
	
	// проверяем есть ли консоль на следующей странице
	ЕстьКодНаСтранице = Форма.конс_СоответствияКодовНаСтранице.Свойство(АктивированнаяВкладка);
	
	Если ЕстьКодНаСтранице Тогда
		
		// устанавливаем код текущей страницы
		Соответствие = Форма.конс_СоответствияКодовНаСтранице[АктивированнаяВкладка];
		ПрограммныйКод = Соответствие.Код;
		
		УстановитьТекст(Форма, ПрограммныйКод, Неопределено, Ложь);
	КонецЕсли;
	
	// помещаем ключ текущей страницы в реквизит активной страницы
	Форма.конс_КлючАктивнойСтраницы = АктивированнаяВкладка;
	
	Форма.конс_ЭтоИзменениеСтраницы = Ложь;
	
	Возврат ЕстьКодНаСтранице;
	
КонецФункции

#Область СобытияРедактора

Процедура ДокументСформирован(Элемент, Форма) Экспорт
	
	Форма.конс_ДокументЗагружен = Истина;
	
	#Если ВебКлиент Тогда
	Если ВебДокументДоступен() Тогда
		ИнициализацияРедактора(Форма);
		АктивироватьДополнительныеФункции(Форма);
	Иначе
		ПоказатьПредупреждение( , "К сожалению, в веб-клиенте недоступны практически все функции.
			|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
	КонецЕсли;
	#Иначе
	ИнициализацияРедактора(Форма);
	АктивироватьДополнительныеФункции(Форма);
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбработатьСобытиеРедактора(Форма, Событие) Экспорт
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		
		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Форма, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Форма, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Форма, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандПоля

#Область КонструкторЗапросов

Процедура ВызватьКонструкторЗапроса(Форма, ТекстЗапроса) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ТекстЗапроса, Форма);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТекстЗапроса(ТекстЗапроса, Форма)
	
	Если НЕ View(Форма).queryMode Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "|", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Форма = ДопПараметры.Форма;
	
	Конструктор = Новый КонструкторЗапроса();
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение( , "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	Позиция = Неопределено;
	
	Если Текст <> Неопределено Тогда
		
		ОчиститьТекст(Форма);
		
		Если НЕ View(Форма).queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		
		УстановитьТекст(Форма, Текст, Позиция, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

Процедура ВызватьКонструкторФорматнойСтроки(Форма, ПараметрыСтроки)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ПараметрыСтроки", ПараметрыСтроки);
	
	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	Позиция = Неопределено;
	ДопПараметры.ПараметрыСтроки.Свойство("range", Позиция);
	
	Если ФорматнаяСтрока <> Неопределено Тогда
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ДопПараметры.Форма, ФорматнаяСтрока, Позиция, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаблокироватьДляИзменения

Процедура ТолькоДляЧтения(Форма) Экспорт
	
	View(Форма).setReadOnly(Форма.конс_ТолькоДляЧтения);
	УправлениеВозможностьюРедактирования(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеПодсказки

Процедура БыстрыеПодсказки(Форма) Экспорт
	
	Форма.конс_БыстрыеПодсказки = НЕ Форма.конс_БыстрыеПодсказки;
	View(Форма).enableQuickSuggestions(Форма.конс_БыстрыеПодсказки);
	УправлениеБыстрымиПодсказками(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПодсвечиватьЗапросы

Процедура ПодсвечиватьЗапросы(Форма) Экспорт
	
	Форма.конс_ПодсвечиватьЗапросы = НЕ Форма.конс_ПодсвечиватьЗапросы;
	Форма.Элементы.конс_ПодсвечиватьЗапросы.Пометка = Форма.конс_ПодсвечиватьЗапросы;
	ИмяТемы = "bsl-white" + ?(Форма.конс_ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(Форма, ИмяТемы);
	
КонецПроцедуры

#КонецОбласти

#Область ВидимостьСтрокиСостояния

Процедура СтрокаСостояния(Форма) Экспорт
	
	Форма.конс_ВидимостьСтрокиСостояния = НЕ Форма.конс_ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

Функция View(Форма) Экспорт
	
	Возврат Форма.Элементы.конс_Код.Документ.defaultView;
	
КонецФункции

Процедура УстановитьТекст(Форма, Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт
	
	View(Форма).setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

Функция ПолучитьТекст(Форма) Экспорт
	
	Код = View(Форма).getText();
	
	Возврат Код;
	
КонецФункции

Функция ОчиститьТекст(Форма) Экспорт
	
	Возврат View(Форма).eraseText();
	
КонецФункции

Процедура ПереключитьРежимЗапроса(Форма, РежимЗапроса) Экспорт
	
	Форма.конс_ЭтоИзменениеСтраницы = Истина;
	
	ИдентификаторРежима = ?(РежимЗапроса, "bsl_query", "bsl");
	
	ТекстЗапроса = ПолучитьТекст(Форма);
	
	View(Форма).setLanguageMode(ИдентификаторРежима);
	
	View(Форма).updateText(ТекстЗапроса, Ложь, Ложь);
	
	Форма.конс_ЭтоИзменениеСтраницы = Ложь;
	
КонецПроцедуры

Процедура ОтформатироватьТекст(Форма) Экспорт
	
	View(Форма).formatDocument();
	
КонецПроцедуры

// Показать номера строк
Процедура ПоказатьНомераСтрок(Форма) Экспорт
	
	View(Форма).showLineNumbers();
	
КонецПроцедуры

// Скрыть номера строк
Процедура СкрытьНомераСтрок(Форма) Экспорт
	
	View(Форма).hideLineNumbers();
	
КонецПроцедуры

// Включить/выключить режим только для чтения
Процедура УстановитьРежимТолькоДляЧтения(Форма, ТолькоДляЧтения) Экспорт
	
	View(Форма).setReadOnly(ТолькоДляЧтения);
	
КонецПроцедуры

// Установить тему редактора
// Возможные варианты имени темы:
// - bsl-white - светлая тема
// - bsl-white-query - светлая тема с подсветкой запросов
// - bsl-dark - темная тема
// - bsl-dark-query - темная тема с подсветкой запросов
// - bsl-edt-white - светлая тема в стиле EDT
// - bsl-edt-dark - темная тема в стиле EDT
Процедура УстановитьТему(Форма, ИмяТемы) Экспорт
	
	View(Форма).setTheme(ИмяТемы);
	
КонецПроцедуры

// Показать/скрыть миникарту
Процедура Миникарта(Форма, Показать) Экспорт
	
	View(Форма).minimap(Показать);
	
КонецПроцедуры

// Получить выделенный текст
Функция ПолучитьВыделенныйТекст(Форма) Экспорт
	
	Возврат View(Форма).getSelectedText();
	
КонецФункции

// Заменить выделенный текст
Процедура ЗаменитьВыделенныйТекст(Форма, Текст) Экспорт
	
	View(Форма).selectedText(Текст);
	
КонецПроцедуры

// Вставить строку в указанную позицию
Процедура ВставитьСтроку(Форма, НомерСтроки, Текст) Экспорт
	
	View(Форма).insertLine(НомерСтроки, Текст);
	
КонецПроцедуры

// Добавить строку в конец
Процедура ДобавитьСтроку(Форма, Текст) Экспорт
	
	View(Форма).addLine(Текст);
	
КонецПроцедуры

// Получить координаты выделения (строки, колонки)
Функция ПолучитьКоординатыВыделения(Форма) Экспорт
	
	Возврат View(Форма).getSelectionCoordinates();
	
КонецФункции

// Получить номера начальной и конечной строк выделения
Функция ПолучитьНомераСтрокВыделения(Форма) Экспорт
	
	Возврат View(Форма).getSelectionLineNumbers();
	
КонецФункции

// Показать панель координат выделения
Процедура ПоказатьКоординатыВыделения(Форма) Экспорт
	
	View(Форма).showSelectionCoordinates();
	
КонецПроцедуры

// Установить выделение по координатам
Процедура УстановитьВыделение(Форма, НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка) Экспорт
	
	View(Форма).setSelection(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	
КонецПроцедуры

// Получить номер текущей строки
Функция ПолучитьТекущуюСтроку(Форма) Экспорт
	
	Возврат View(Форма).getCurrentLine();
	
КонецФункции

// Получить номер текущей колонки
Функция ПолучитьТекущуюКолонку(Форма) Экспорт
	
	Возврат View(Форма).getCurrentColumn();
	
КонецФункции

// Найти текст в редакторе
Процедура НайтиТекст(Форма, СтрокаПоиска) Экспорт
	
	View(Форма).findText(СтрокаПоиска);
	
КонецПроцедуры

// Открыть виджет поиска
Процедура ОткрытьВиджетПоиска(Форма) Экспорт
	
	View(Форма).openSearchWidget();
	
КонецПроцедуры

// Перейти к строке
Процедура ПерейтиКСтроке(Форма) Экспорт
	
	View(Форма).gotoLine();
	
КонецПроцедуры

// Показать строку в центре экрана
Процедура ПоказатьСтрокуВЦентре(Форма, НомерСтроки) Экспорт
	
	View(Форма).revealLineInCenter(НомерСтроки);
	
КонецПроцедуры

// Перейти к парной скобке
Процедура ПерейтиКПарнойСкобке(Форма) Экспорт
	
	View(Форма).jumpToBracket();
	
КонецПроцедуры

// Добавить закладку на строку
Процедура ДобавитьЗакладку(Форма, НомерСтроки) Экспорт
	
	View(Форма).addBookmark(НомерСтроки);
	
КонецПроцедуры

// Удалить закладку со строки
Процедура УдалитьЗакладку(Форма, НомерСтроки) Экспорт
	
	View(Форма).removeBookmark(НомерСтроки);
	
КонецПроцедуры

// Получить список всех закладок
Функция ПолучитьЗакладки(Форма) Экспорт
	
	Возврат View(Форма).getBookmarks();
	
КонецФункции

// Установить маркеры ошибок/предупреждений
Процедура УстановитьМаркеры(Форма, МаркерыJSON) Экспорт
	
	View(Форма).setMarkers(МаркерыJSON);
	
КонецПроцедуры

// Сбросить позицию кнопки помощи
Процедура СброситьПозициюКнопкиПомощи(Форма) Экспорт
	
	View(Форма).resetHelpButtonPosition();
	
КонецПроцедуры

// Показать справку программно
Процедура ПоказатьСправку(Форма) Экспорт
	
	View(Форма).showHelp();
	
КонецПроцедуры

// Скрыть справку программно
Процедура СкрытьСправку(Форма) Экспорт
	
	View(Форма).hideHelp();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеРедактора

Процедура ИнициализацияРедактора(Форма)
	
	Инфо = Новый СистемнаяИнформация();
	
	View(Форма).init(Инфо.ВерсияПриложения);
	View(Форма).setOption("autoResizeEditorLayout", Истина);
	View(Форма).setOption("renderQueryDelimiters", Истина);
	View(Форма).setOption("generateModificationEvent", Истина);
	View(Форма).hideScrollX();
	View(Форма).hideScrollY();
	
КонецПроцедуры

Процедура АктивироватьДополнительныеФункции(Форма)
	
	Если Форма.Элементы.Найти("конс_ТолькоДляЧтения") <> Неопределено Тогда
		
		Форма.Элементы.конс_КонструкторЗапроса.Доступность = Истина;
		Форма.Элементы.конс_ТолькоДляЧтения.Доступность = Истина;
		Форма.Элементы.конс_БыстрыеПодсказки.Доступность = Истина;
		Форма.Элементы.конс_ПодсвечиватьЗапросы.Доступность = Истина;
		Форма.Элементы.конс_СтрокаСостояния.Доступность = Истина;
		
		УправлениеБыстрымиПодсказками(Форма);
		УправлениеВидимостьюСтрокиСостояния(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, Форма) Экспорт
	
	УстанавливатьРасширениеРаботыСФайлами = Истина;
	
	Если Подключено Тогда
		
		УправлениеВозможностьюРедактирования(Форма);
		ИзвлечьИсходники(Форма);
		
	Иначе
		
		#Если ВебКлиент Тогда
		Если УстанавливатьРасширениеРаботыСФайлами Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект, Форма);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе
			ПоказатьПредупреждение( , "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(Форма) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Форма);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура УправлениеВозможностьюРедактирования(Форма)
	
	Элементы = Форма.Элементы;
	
	ТолькоПросмотр = Форма.конс_ТолькоДляЧтения;
	ДокументЗагружен = Форма.конс_ДокументЗагружен;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	
	Если Элементы.Найти("конс_ТолькоДляЧтения") <> Неопределено Тогда
		Элементы.конс_ТолькоДляЧтения.Пометка = НЕ ТолькоПросмотр;
		Элементы.конс_КонструкторЗапроса.Доступность = ДоступностьКнопок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзвлечьИсходники(Форма)
	
	#Если ВебКлиент Тогда
	Форма.конс_HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	Форма.конс_ИсходникиЗагружены = Истина;
	#Иначе
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект, ДопПараметры);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	
	ДопПараметры.Вставить("КаталогИсходников", КаталогИсходников);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект, ДопПараметры);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект, ДопПараметры);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект, ДопПараметры);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "cons_" + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Если Существует Тогда
		Форма.конс_ИндексныйФайл = ИндексныйФайл(КаталогИсходников);
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, Форма.конс_ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ИндексныйФайл(КаталогИсходников)
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	ДопПараметры.Форма.конс_HTML = СкопированныйФайл;
	ДопПараметры.Форма.конс_ИсходникиЗагружены = Истина;
	
КонецПроцедуры

Процедура ИзвлечьИсходникиНаКлиенте(ДопПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект, ДопПараметры);
	НачатьУдалениеФайлов(Оповещение, ДопПараметры.КаталогИсходников, "*.*");
	
КонецПроцедуры

Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект, ДопПараметры);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(ДопПараметры.Форма.конс_АдресМакета);
	
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + "cons_" + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл(КаталогИсходников);
		
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина, ДопПараметры);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиОшибку(Текст, БлокироватьКонсоль, ДопПараметры)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("БлокироватьКонсоль", БлокироватьКонсоль);
	ПараметрыОповещения.Вставить("Форма", ДопПараметры.Форма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.БлокироватьКонсоль Тогда
		ДопПараметры.Форма.конс_Код.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеРедактора

Процедура ЗакрытьКонсоль(Форма)
	
	Если ЗначениеЗаполнено(Форма.конс_ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, Форма.конс_ИндексныйФайл);
	Иначе
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаМетаданных

Процедура ОбработкаСобытияПолученияМетаданных(Форма, Событие)
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(Форма, ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(Форма, ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(Форма, ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(Форма, ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View(Форма).triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet" Тогда
		View(Форма).updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(Форма, ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(Форма, КаталогИсходногоКода, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(Форма, ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля", ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных", ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных", ЧастиЗапроса[3]);
		
		конс_ОбщийМодульВызовСервера.ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, ПолучитьРазделительПути());
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(Форма, КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(Форма, КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, ПолучитьРазделительПути(), ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = конс_ОбщийМодульВызовСервера.ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View(Форма).parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

Функция ЗагрузитьОбъектМетаданныхПоЗапросу(Форма, ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = конс_ОбщийМодульВызовСервера.ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View(Форма).updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗагрузитьСписокМетаданныхПоЗапросу(Форма, ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = конс_ОбщийМодульВызовСервера.ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View(Форма).updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьКаталогИсходногоКода()
	
	КаталогИсходногоКода = конс_ОбщийМодульВызовСервера.КаталогИсходногоКодаКонфигурации();
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;
	
	Возврат КаталогИсходногоКода;
	
КонецФункции

Функция ЗагрузитьОбщийМодульПоИмени(Форма, КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = Форма.конс_ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Module.bsl", ПолучитьРазделительПути(), ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View(Форма).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла) Экспорт
	
	СмещениеИмениВПути = 2;
	
	Путь = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути(), Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла, "UTF-8");
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

#КонецОбласти

Функция ЕстьКод(Форма)
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст(Форма)), Символы.ПС, ""));
	
КонецФункции

Процедура УправлениеБыстрымиПодсказками(Форма)
	
	Форма.Элементы.конс_БыстрыеПодсказки.Пометка = Форма.конс_БыстрыеПодсказки;
	
КонецПроцедуры

Процедура ПереключитьТему(Форма, Тема)
	
	View(Форма).setTheme(Тема);
	
КонецПроцедуры

Процедура УправлениеВидимостьюСтрокиСостояния(Форма)
	
	Форма.Элементы.конс_СтрокаСостояния.Пометка = Форма.конс_ВидимостьСтрокиСостояния;
	
	Если Форма.конс_ВидимостьСтрокиСостояния Тогда
		View(Форма).showStatusBar();
	Иначе
		View(Форма).hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры

Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	РазделительПути = ПолучитьРазделительПути();
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
КонецФункции

#КонецОбласти